GFG : Maximum sum of adjacent elements

Maximum sum of Non-adjacent nodes
Difficulty: MediumAccuracy: 55.35%Submissions: 85K+Points: 4Average Time: 45m
Given a binary tree with a value associated with each node. Your task is to select a subset of nodes such that the sum of their values is maximized, with the condition that no two selected nodes are directly connected that is, if a node is included in the subset, neither its parent nor its children can be included.

Examples:

Input: root[] = [11, 1, 2]

Output: 11
Explanation: The maximum sum is obtained by selecting the node 11.

Input: root[] = [1, 2, 3, 4, N, 5, 6]

Output: 16
Explanation: The maximum sum is obtained by selecting the nodes 1, 4, 5, and 6, which are not directly connected to each other. Their total sum is 16.  

Constraints:
1 ≤ no. of nodes in the tree ≤ 104
1 ≤ Node.val ≤ 105


Solution : 

class Solution {
    // Function to return the maximum sum of non-adjacent nodes.
    public int getMaxSum(Node root) {
        // code here
          int[] result = helper(root);
        return Math.max(result[0], result[1]);
    }
     private int[] helper(Node node) {
        if (node == null) return new int[]{0, 0};
        
        int[] left = helper(node.left);
        int[] right = helper(node.right);
        
        // If we include current node, we cannot include its immediate children
        int include = node.data + left[1] + right[1];
        
        // If we exclude current node, we can include or exclude its children independently
        int exclude = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
        
        return new int[]{include, exclude};
    }
}
