LeetCode : Binary Tree Paths

257. Binary Tree Paths
Solved
Easy
Topics
Companies
Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

 

Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100



Solution : 


**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        
  List<String> result = new ArrayList<>();
        if (root == null) return result;
        dfs(root, "", result);
        return result;
    }

    private void dfs(TreeNode node, String path, List<String> result) {
        if (node == null) return;

        // Append current node value to path
        path += node.val;

        // If it's a leaf node, add the path to result
        if (node.left == null && node.right == null) {
            result.add(path);
            return;
        }

        // If not a leaf, continue DFS with "->" appended
        if (node.left != null) dfs(node.left, path + "->", result);
        if (node.right != null) dfs(node.right, path + "->", result);
    }
}
